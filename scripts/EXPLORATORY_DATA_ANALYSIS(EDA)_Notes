-- =========================================
-- EXPLORATORY DATA ANALYSIS(EDA) PROJECT 
-- =========================================
-- This file contains my own notes from a EXPLORATORY DATA ANALYSIS(EDA) PROJECT by Data with Baraa

-- DIMENSION VS MEASURE
--
--		Is data type = number

--		YES					NO
							--> DIMENSION
--	Does it make sense
--	 to aggregate?
--
--		YES					NO
--		--> MEASURE			--> DIMENSION


-- Dimensions:				Measures:

-- Category					Sales
-- Product					Quantity
-- Birthdate				Age
-- ID



-- =========================================
-- DATABASE EXPLORATION
-- =========================================

-- Explore all objects in the Database
SELECT * FROM INFORMATION_SCHEMA.TABLES

-- Explore all columns in the Database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME ='dim_customers'


-- =========================================
-- DIMENSIONS EXPLORATION
-- =========================================

-- Identifying the unique values (or categories) in each dimension.

-- Recognizing how data might be grouped or segmented, 
-- which is useful for later analysis

-- Explore all countries our customers come from.
SELECT DISTINCT country FROM gold.dim_customers

-- Explore all categories "The major divisions"
SELECT DISTINCT category, subcategory, product_name FROM gold.dim_products
ORDER BY 1, 2, 3


-- =========================================
-- DATE EXPLORATION
-- =========================================

-- Identify the earliest and latest dates (boundaries)
-- Understand the scope of data and the timespan

-- Find the date of the first and last order

SELECT 
MIN(order_date) AS first_order_date, 
MAX(order_date) AS last_order_date,
DATEDIFF(month, MIN(order_date), MAX(order_date)) AS order_range_months
FROM gold.fact_sales

-- Find the youngest and the oldest customer
SELECT 
MIN(birthdate) AS oldest_birthdate,
DATEDIFF(year, MIN(birthdate), GETDATE()) AS oldest_age,
MAX(birthdate) AS youngest_birthdate,
DATEDIFF(year, MAX(birthdate), GETDATE()) AS youngest_age
FROM gold.dim_customers


-- =========================================
-- MEASURES EXPLORATION
-- =========================================

-- Calculate the key metric of the business(Big numbers)

-- Highest level of aggregation | Lowest level of details

-- MEASURE: SUM(Sales), AVG(price), COUNT(Quantity)


-- Find the Total Sales
SELECT
SUM(sales_amount) AS total_sales
FROM gold.fact_sales

-- Find how many items are sold
SELECT
SUM(quantity) AS total_quantity
FROM gold.fact_sales

-- Find the average selling price
SELECT AVG(price) AS avg_price FROM gold.fact_sales

-- Find the Total Number of Orders
SELECT
COUNT(order_number)
FROM gold.fact_sales

SELECT 
COUNT( DISTINCT order_number)
FROM gold.fact_sales

-- Find the Total Number of products
SELECT
COUNT(product_key)
FROM gold.dim_products

-- Find the Total Number of customers
SELECT
COUNT( customer_key)
FROM gold.dim_customers

-- Find the Total Number of customers that has placed an order
SELECT
COUNT(DISTINCT customer_key)
FROM gold.fact_sales


-- Generate a Report that shoes all key metrics of the business

SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity' AS measure_name, SUM(quantity) AS total_quantity FROM gold.fact_sales
UNION ALL 
SELECT 'Average Price' AS measure_name, AVG(price) AS avg_price FROM gold.fact_sales
UNION ALL
SELECT 'Total nr. orders' AS measure_name, COUNT(DISTINCT order_number) FROM gold.fact_sales
UNION ALL
SELECT 'Total nr. products' AS measure_name, COUNT(product_key) FROM gold.dim_products
UNION ALL
SELECT 'Total nr. customers' AS measure_name, COUNT(DISTINCT customer_key) FROM gold.fact_sales


-- =========================================
-- MAGNITUDE ANALYSIS
-- =========================================

-- Compare the measure values by categories
-- It helps us understand the importance of different categories.

--		[Measure] by [Dimension]:

-->		Total sales by Country
--		Total quantity by category 
--		Average price by product
--		Total orders by customer

-- Low cardinality Dimension
-- Dimension with few unique values:
-- (eg. Category, Country, Gender ...)

-- High cardinality Dimension
-- Dimension with large number of unique values:
-- (eg. Product, Customer, Address ...)


-- Find the total customers by countries
SELECT 
country,
COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC

-- Find the total customers by gender
SELECT 
gender,
COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC

-- Find the total products by category
SELECT 
category,
COUNT(product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC

-- What is the average costs in each category
SELECT 
category,
AVG(cost) AS avg_cost
FROM gold.dim_products
GROUP BY category
ORDER BY avg_cost DESC

-- What is the total revenue generated by each category
SELECT 
p.category,
SUM(f.sales_amount) total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products AS p
ON p.product_key = f.product_key
GROUP BY p.category
ORDER BY total_revenue DESC

-- Find the total revenue generated by each customer
SELECT 
c.customer_key,
c.first_name,
c.last_name,
SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers AS c
ON c.customer_key = f.customer_key
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_revenue DESC

-- What is the distribution of sold items across countries?

SELECT
c.country,
COUNT(f.quantity) AS total_sold_items
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers AS c
ON c.customer_key = f.customer_key
GROUP BY  c.country
ORDER BY total_sold_items DESC


-- =========================================
-- Ranking Analysis 
-- =========================================

-- Order the values of dimensions by measure.
-- Top N | Bottom N

-- Rank[Dimension] BY [Measure]
-- Rank countries BY total_sales
-- TOP5 products BY quantity
-- BOTTOM 3 customers BY total_orders


-- Which 5 products generate the highest revenue?

SELECT TOP 5
p.product_name,
SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC

-- Giving ranking to each one of the products
SELECT 
p.product_name,
ROW_NUMBER() OVER(ORDER BY SUM(f.sales_amount) DESC) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key = f.product_key
GROUP BY p.product_name

-- What are the 5 worst-performing products in terms of sales?

SELECT TOP 5
p.product_name,
SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue ASC

-- Which 5 subcategories generate the highest revenue?
SELECT TOP 5 
p.subcategory,
SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key = f.product_key
GROUP BY p.subcategory
ORDER BY total_revenue DESC


-- Use WINDOW FUNCTIONS for more flexible and complex queries with extra details

-- Find the Top-10 customers who have generated the highest revenue

SELECT TOP 10
c.customer_key,
c.first_name,
c.last_name,
SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers AS c
ON c.customer_key = f.customer_key
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_revenue DESC

-- And 3 customers with the fewest orders placed.
SELECT TOP 3
c.customer_key,
c.first_name,
c.last_name,
COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers AS c
ON c.customer_key = f.customer_key
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_orders ASC
